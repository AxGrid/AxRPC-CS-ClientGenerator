// AUTOGENERATED CODE
using System;
using Google.Protobuf;
using UniRx;
{{ if opt.protobuf_ns && opt.protobuf_ns != "" }}using {{ opt.protobuf_ns }};{{ end }}

namespace {{opt.service_ns}} {
    
    public static class AxServiceConfigurations {
         public static string Url {get;set;} {{ if default_service_url && default_service_url != "" }} = {{ default_service_url }};{{ end }}
         public static long CorrelationId { get; set; }
    }
    
    public class AxRPCException : Exception {
        public int Code { get; set; }
        public AxRPCException(string message, int code) : base($"{message}({code})") { Code = code; }
    }


    {{ for service in services }}
    public class {{service.name}} {
       
{{ for method in service.methods }}
        public static {{ method.response_name }} {{ method.name | string.capitalize }}({{ method.request_name }} request) {
            return null;
        }
        
        public static void {{ method.name | string.capitalize }}Async({{ method.request_name }} request, DAxRPCResult<{{ method.response_name }}> result, DAxRPCError error = null) {
            var r = new Request {
                {{ method.request_name }} = request,
                CorrelationId = AxServiceConfigurations.CorrelationId++
            };
            ObservableWWW.PostAndGetBytes(AxServiceConfigurations.Url, r.ToByteArray())
                 .SubscribeOnMainThread()
                 .Subscribe(_result => {
                     var response = Response.Parser.ParseFrom(_result);
                     if (!response.Success) error(new AxRPCException(response.ErrorText, response.ErrorCode));
                     result(response.{{ method.response_name }});
                 }, _error => error(new AxRPCException(_error.Message, 515)));
        }
        
{{ end }}

    } 
    {{ end }}
}