// AUTOGENERATED CODE
using Google.Protobuf;
using UniRx;
using System.Collections.Generic;
{{ if opt.protobuf_ns && opt.protobuf_ns != "" }}using {{ opt.protobuf_ns }};{{ end }}

namespace {{opt.service_ns}} {
    
    public static class AxServiceConfigurations {
         public static string Url {get;set;} {{ if default_service_url && default_service_url != "" }} = {{ default_service_url }};{{ end }}
         public static long CorrelationId { get; set; }
         public static string Session { get; set; }
    }
    
    public class AxRPCException : System.Exception {
        public int Code { get; set; }
        public AxRPCException(string message, int code) : base($"{message}({code})") { Code = code; }
    }
    
    public class AxRPCRetryException : AxRPCException {
        public AxRPCRetryException(string message, int code) : base(message, code) {}
    }

    public delegate void DAxRPCError(AxRPCException error);
    public delegate void DAxRPCResult<T>(T result);

{{ for service in services }}
    public class {{service.name}} {
       
{{ for method in service.methods }}
        {{ if method.trx_required }}
        public static IObservable<{{ method.response_name }}> {{ method.name | string.capitalize }}({{ if !method.empty_request }}{{ method.request_name }} request, {{ end }}string trx) {
        {{ else }}
        public static IObservable<{{ method.response_name }}> {{ method.name | string.capitalize }}({{ if !method.empty_request }}{{ method.request_name }} request{{ end }}) {
        {{ end }}
            var r = new {{ service.request_object }} {
                {{ if method.login_required && service.session_field_name && service.session_field_name != "" }}{{ service.session_field_name | string.capitalize }} = AxServiceConfigurations.Session != null ? AxServiceConfigurations.Session : "",{{ end }}
                {{ if service.correlation_id_field_name && service.correlation_id_field_name != "" }}{{ service.correlation_id_field_name | string.capitalize }} = AxServiceConfigurations.CorrelationId++,{{ end }}
                {{ if method.trx_required && service.trx_field_name }}{{ service.trx_field_name | string.capitalize }} = trx,{{ end }}
                {{ method.request_name }} = {{ if method.empty_request }}new {{ method.request_name }}(){{ else }}request{{ end }}
            };

            return ObservableWWW.PostAndGetBytes(AxServiceConfigurations.Url, r.ToByteArray(), new Dictionary<string, string> { {"Content-Type", "application/octet-stream"} })
             .Select(bytes => {
                 var response = {{ service.response_object }}.Parser.ParseFrom(bytes);
                 if (!response.Success && response.ErrorCode >= 500) throw new AxRPCRetryException(response.ErrorText, response.ErrorCode);
                 if (!response.Success)  throw new AxRPCException(response.ErrorText, response.ErrorCode);
                 return response.{{ method.response_name }};
             })
             .OnErrorRetry((WWWErrorException ex) => Log.Warn("WWWErrorException:{}", ex), {{ opt.retry_count }}, System.TimeSpan.FromMilliseconds({{ opt.retry_timeout }}))
             .OnErrorRetry((AxRPCRetryException ex) => Log.Warn(ex), {{ opt.retry_count }}, System.TimeSpan.FromMilliseconds({{ opt.retry_timeout }}));
        }
        
        {{ if method.trx_required }}
        public static void {{ method.name | string.capitalize }}Async({{ if !method.empty_request }}{{ method.request_name }} request, {{ end }}string trx, DAxRPCResult<{{ method.response_name }}> result, DAxRPCError error = null) {
            {{ method.name | string.capitalize }}(request, trx)
        {{ else }}
        public static void {{ method.name | string.capitalize }}Async({{ if !method.empty_request }}{{ method.request_name }} request, {{ end }}DAxRPCResult<{{ method.response_name }}> result, DAxRPCError error = null) {
            {{ method.name | string.capitalize }}({{ if !method.empty_request }}request{{ end }})
        {{ end }}    .SubscribeOnMainThread()
                 .Subscribe(
                    _result => result?.Invoke(_result), 
                    _error => {
                        if (_error is WWWErrorException wwwError) error?.Invoke(new AxRPCRetryException(wwwError.RawErrorMessage, (int)wwwError.StatusCode));
                        else if (_error is AxRPCException axError) error?.Invoke(axError);
                        else error?.Invoke(new AxRPCRetryException(_error.Message, 515));
                });
        }{{ end }}
    }{{ end }}
}