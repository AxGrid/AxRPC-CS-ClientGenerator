// AUTOGENERATED CODE

import axios from 'axios';
import proto from "./proto"

const inout = {{ if opt.protobuf_ns && opt.protobuf_ns != "" }}proto.{{ opt.protobuf_ns }}{{ else }}proto{{ end }};

{{ if !opt.exclude_commons }}
const configuration = {
   url: "/ax-rpc/v1/",
   correlationId: 0,
   debug: false
};
{{ end }}

export class AxRPCError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code;
    }
}

{{ for service in services }}
export class {{service.name }} {

    constructor(params) {
        this.params = {...configuration, ...params};
    }

    getSession() {
        if (this.params.session)
            if (typeof this.params.session === "function") {
                return this.params.session();
            } else { return this.params.session; }
        return "";
    }

{{ for method in service.methods }}
        /// {{ method.description }}{{ if service.description != "Common Service" }} ({{ service.description }}){{ end }}
        {{ method.name }}({{ if !method.empty_request }}request{{ end }}{{ if method.trx_required }}, trx {{ end }}) {
            const ro = new inout.{{ service.request_object }}();
            {{ if method.login_required && service.session_field_name && service.session_field_name != "" }}ro.{{ service.session_field_name }} = this.getSession();{{ end }}
            {{ if service.correlation_id_field_name && service.correlation_id_field_name != "" }}ro.{{ service.correlation_id_field_name }} = this.params.correlationId++;{{ end }}
            {{ if method.trx_required && service.trx_field_name }}ro.{{ service.trx_field_name }} = trx;{{ end }}
            ro.{{ method.request_name | un_capitalize }} = {{ if method.empty_request }}{};{{ else }}request;{{ end }}
            const bytes = inout.Request.encode(ro).finish(); 
            return axios.post(this.params.url, new Uint8Array(bytes), {
                               headers: { 'Content-Type': 'application/octet-stream'},
                               responseType: "arraybuffer"
            }).then(response => {
                    if (this.params.debug)  console.log("CODE:", response.status, "DATA:", response.data);
                    if (response.status === 200) {
                           const po = inout.Response.decode(new Uint8Array(response.data));
                           if (this.params.debug) console.log("RESPONSE:", po);
                           if (po.errorCode) {
                                if (po.errorCode === 401 && this.params.store) this.params.store.dispatch({type:"CLEAR_SESSION"}); 
                                throw new AxRPCError(po.errorText, po.errorCode); // {code: po.errorCode, error: po.errorText};
                           }
                           return po.{{ method.response_name | un_capitalize }};
                    } else {
                        throw {code: response.status, error: "Http Error"};
                    }
                }, error => { throw {code: 1, error: "Network Error"} });
        }
{{ end }}
{{ end }}
}