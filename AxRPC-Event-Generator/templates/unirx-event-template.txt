// AUTOGENERATED CODE
using UniRx;
using System.Collections.Generic;
using System;
using System.Threading;
using AxGrid.Utils;
{{ if opt.protobuf_ns && opt.protobuf_ns != "" }}using {{ opt.protobuf_ns }};{{ end }}

namespace {{opt.service_ns}} {

public static class AxRPCEvents {

{{ for event in events }}

    public static class {{event.event_object}}Subscriber {
        
        private static readonly Queue<{{event.event_object}}> eventsQueue = new Queue<{{event.event_object}}>();
        public static Queue<{{event.event_object}}> EventsQueue => eventsQueue;
        
        private static long lastId = -1;
        private static string subscribeTo = null; 

        private static IDisposable disObject = null;
        private static int errorCount = 0;
        
        public static void Unsubscribe()
        {
            {{ if opt.debug }}Log.Info($"Unsubscribe {{event.event_object}}Subscriber from {subscribeTo}");{{ end }}
            subscribeTo = null;
            disObject?.Dispose();
        }
        
        public static void Subscribe(string channel)
        {
            disObject?.Dispose();
            lastId = -1;
            subscribeTo = channel;
            {{ if opt.debug }}Log.Info($"Subscribe {{event.event_object}}Subscriber from {subscribeTo}");{{ end }}
            errorCount = 0;
            OnSubscribe();
        }       
        
        private static void OnSubscribe() {
             if (string.IsNullOrEmpty(subscribeTo)) return;
             var url = AxServiceConfigurations.Url + $"ev?s={AxServiceConfigurations.Session}&c={subscribeTo}&l={lastId}";
             {{ if opt.debug }}Log.Debug($"AxEvent request:{url}");{{ end }}
             disObject = ObservableWWW.GetAndGetBytes(url, new Dictionary<string, string> { {"Content-Type", "application/octet-stream"} })
                 .Timeout(TimeSpan.FromMilliseconds({{opt.timeout}}))
                 .Select(bytes =>
                 {
                     if (bytes == null || bytes.Length == 0)
                     {
                         if (lastId == -1) {
                            lastId = 0;
                            {{ if opt.debug }}Log.Debug("{{event.event_object}}Subscriber set lastId to 0");{{ end }}
                         }
                         {{ if opt.debug }}Log.Debug($"{{event.event_object}}Subscriber receive NULL bytes.");{{ end }}
                         return null;
                     }
                     {{ if opt.debug }}Log.Debug($"{{event.event_object}}Subscriber receive {bytes.Length}bytes.");{{ end }}
                     var collection = {{event.event_collection_object}}.Parser.ParseFrom(bytes);
                     collection.Events.ForEach(item => eventsQueue.Enqueue(item));
                     var tempId = (long) collection.Events[collection.Events.Count - 1].Id;
                     if (lastId > -1) {
                         collection.Events.ForEach(item =>
                         {
                             {{ if opt.debug }}Log.Debug("{{event.event_object}}Subscriber queue-event {0}", item);{{ end }}
                             eventsQueue.Enqueue(item);
                         });
                     }
                     {{ if opt.debug }} else {
                        Log.Debug("{{event.event_object}}Subscriber set lastId to {0}", tempId);
                     } {{ end }}
                     lastId = tempId;
                     return collection;
                 }).ObserveOnMainThread()
                 .Subscribe(ok =>
                     {
                         errorCount = 0;
                         if (eventsQueue.Count > 0) {
                            Settings.Invoke("Events", eventsQueue, "{{event.event_object}}", subscribeTo);
                            Settings.GlobalModel.EventManager.Invoke("Events", eventsQueue, "{{event.event_object}}", subscribeTo);
                         }
                         if (subscribeTo != null) OnSubscribe();
                     }, 
                     error =>
                 {
                     if (error.GetType() == typeof(System.TimeoutException))
                     {
                         if (subscribeTo != null) OnSubscribe();
                     }
                     else
                     {
                         errorCount++;
                         Log.Error("Error on {{event.event_object}}Subscriber: {0}", error);
                         if (subscribeTo != null)
                         {
                             Observable.Start(() =>
                             {
                                 if (errorCount < 10) Thread.Sleep(1000);
                                 else if (errorCount < 50) Thread.Sleep(2000);
                                 else Thread.Sleep(5000);
                                 if (subscribeTo != null) OnSubscribe();
                             }).Subscribe();
                         }
                     }
                 });

        }
    } // end of {{event.event_object}}Subscriber
{{ end }}

    } 
} 